# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Siltarae CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: "adopt"

      - name: Make application.yml
        run: |
          cd ./src/main
          mkdir resources
          cd resources
          touch ./application.yml
          echo "${{ secrets.APPLICATIONYML_PROD }}" > ./application.yml
        shell: bash

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKERHUB_REPO }}:${{ secrets.TAG }} .
          docker push ${{ secrets.DOCKERHUB_REPO }}:${{ secrets.TAG }}

      - name: Deploy IAM Access
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_IAM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_IAM_SECRET_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.REGION }}

      - name: Code Deploy
        run: aws deploy create-deployment --application-name ${{ secrets.DEPLOY_APPLICATION_NAME }} --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name ${{ secrets.DEPLOY_GROUP }} --s3-location bucket=${{ secrets.DEPLOY_S3_BUCKET }},key=${{ secrets.DEPLOY_S3_KEY }},bundleType=zip